
# See the docstring in versioneer.py for instructions. Note that you must
# re-run 'versioneer.py setup' after changing this section, and commit the
# resulting files.

[versioneer]
VCS = git
style = pep440
versionfile_source = pandas/_version.py
versionfile_build = pandas/_version.py
tag_prefix = v
parentdir_prefix = pandas-

[flake8]
max-line-length = 88
ignore =
    E203,  # space before : (needed for how black formats slicing)
    W503,  # line break before binary operator
    W504,  # line break after binary operator
    E402,  # module level import not at top of file
    E731,  # do not assign a lambda expression, use a def
    C406,  # Unnecessary list literal - rewrite as a dict literal.
    C408,  # Unnecessary dict call - rewrite as a literal.
    C409,  # Unnecessary list passed to tuple() - rewrite as a tuple literal.
    S001   # found modulo formatter (incorrect picks up mod operations)
exclude =
    doc/sphinxext/*.py,
    doc/build/*.py,
    doc/temp/*.py,
    .eggs/*.py,
    versioneer.py,
    env  # exclude asv benchmark environments from linting

[flake8-rst]
bootstrap =
    import numpy as np
    import pandas as pd
    np  # avoiding error when importing again numpy or pandas
    pd  # (in some cases we want to do it to show users)
ignore = E402,  # module level import not at top of file
         W503,  # line break before binary operator
         # Classes/functions in different blocks can generate those errors
         E302,  # expected 2 blank lines, found 0
         E305,  # expected 2 blank lines after class or function definition, found 0
         # We use semicolon at the end to avoid displaying plot objects
         E703,  # statement ends with a semicolon
         E711,  # comparison to none should be 'if cond is none:'

exclude =
    doc/source/getting_started/basics.rst
    doc/source/development/contributing_docstring.rst


[yapf]
based_on_style = pep8
split_before_named_assigns = false
split_penalty_after_opening_bracket = 1000000
split_penalty_logical_operator = 30

[tool:pytest]
# sync minversion with setup.cfg & install.rst
minversion = 4.0.2
testpaths = pandas
markers =
    single: mark a test as single cpu only
    slow: mark a test as slow
    network: mark a test as network
    db: tests requiring a database (mysql or postgres)
    high_memory: mark a test as a high-memory only
    clipboard: mark a pd.read_clipboard test
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL
addopts = --strict-data-files
xfail_strict = True
filterwarnings =
    error:Sparse:FutureWarning
    error:The SparseArray:FutureWarning

[coverage:run]
branch = False
omit =
     */tests/*
     pandas/_typing.py
plugins = Cython.Coverage

[coverage:report]
ignore_errors = False
show_missing = True
omit =
    pandas/_version.py
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError
    AbstractMethodError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

[coverage:html]
directory = coverage_html_report

# To be kept consistent with "Import Formatting" section in contributing.rst
[isort]
known_pre_libs = pandas._config
known_pre_core = pandas._libs,pandas.util._*,pandas.compat,pandas.errors
known_dtypes = pandas.core.dtypes
known_post_core = pandas.tseries,pandas.io,pandas.plotting
sections = FUTURE,STDLIB,THIRDPARTY,PRE_LIBS,PRE_CORE,DTYPES,FIRSTPARTY,POST_CORE,LOCALFOLDER
known_first_party = pandas
known_third_party = _pytest,announce,dateutil,docutils,flake8,git,hypothesis,jinja2,lxml,matplotlib,numpy,numpydoc,pkg_resources,pyarrow,pytest,pytz,requests,scipy,setuptools,sphinx,sqlalchemy,validate_docstrings,yaml
multi_line_output = 3
include_trailing_comma = True
force_grid_wrap = 0
combine_as_imports = True
line_length = 88
force_sort_within_sections = True
skip_glob = env,
skip = pandas/__init__.py,pandas/core/api.py

[mypy]
ignore_missing_imports=True
no_implicit_optional=True

[mypy-pandas.conftest]
ignore_errors=True

[mypy-pandas.tests.api.test_api]
ignore_errors=True

[mypy-pandas.tests.arithmetic.test_datetime64]
ignore_errors=True

[mypy-pandas.tests.arrays.test_array]
ignore_errors=True

[mypy-pandas.tests.arrays.test_datetimelike]
ignore_errors=True

[mypy-pandas.tests.arrays.test_period]
ignore_errors=True

[mypy-pandas.tests.computation.test_eval]
ignore_errors=True

[mypy-pandas.tests.dtypes.test_common]
ignore_errors=True

[mypy-pandas.tests.dtypes.test_inference]
ignore_errors=True

[mypy-pandas.tests.extension.decimal.test_decimal]
ignore_errors=True

[mypy-pandas.tests.extension.json.array]
ignore_errors=True

[mypy-pandas.tests.extension.json.test_json]
ignore_errors=True

[mypy-pandas.tests.extension.test_numpy]
ignore_errors=True

[mypy-pandas.tests.extension.test_sparse]
ignore_errors=True

[mypy-pandas.tests.frame.test_constructors]
ignore_errors=True

[mypy-pandas.tests.frame.test_convert_to]
ignore_errors=True

[mypy-pandas.tests.indexes.datetimes.test_datetimelike]
ignore_errors=True

[mypy-pandas.tests.indexes.interval.test_base]
ignore_errors=True

[mypy-pandas.tests.indexes.interval.test_interval_tree]
ignore_errors=True

[mypy-pandas.tests.indexes.period.test_period]
ignore_errors=True

[mypy-pandas.tests.indexes.test_base]
ignore_errors=True

[mypy-pandas.tests.indexes.test_category]
ignore_errors=True

[mypy-pandas.tests.indexes.test_numeric]
ignore_errors=True

[mypy-pandas.tests.indexes.test_range]
ignore_errors=True

[mypy-pandas.tests.indexes.timedeltas.test_timedelta]
ignore_errors=True

[mypy-pandas.tests.indexing.test_coercion]
ignore_errors=True

[mypy-pandas.tests.indexing.test_loc]
ignore_errors=True

[mypy-pandas.tests.io.json.test_ujson]
ignore_errors=True

[mypy-pandas.tests.io.parser.conftest]
ignore_errors=True

[mypy-pandas.tests.io.test_sql]
ignore_errors=True

[mypy-pandas.tests.plotting.test_backend]
ignore_errors=True

[mypy-pandas.tests.series.test_constructors]
ignore_errors=True

[mypy-pandas.tests.series.test_operators]
ignore_errors=True

[mypy-pandas.tests.test_algos]
ignore_errors=True

[mypy-pandas.tests.test_base]
ignore_errors=True

[mypy-pandas.tests.tseries.offsets.test_offsets]
ignore_errors=True

[mypy-pandas.tests.tseries.offsets.test_offsets_properties]
ignore_errors=True

[mypy-pandas.tests.tseries.offsets.test_yqm_offsets]
ignore_errors=True
